# main_app/telegram_bot.py
import logging
from typing import Dict, Set
import requests
import time
from datetime import datetime
from threading import Thread
from django.conf import settings

logger = logging.getLogger(__name__)


class TelegramBot:
    """Telegram bot with authentication system"""

    def __init__(self, bot_token: str, admin_password: str):
        self.bot_token = bot_token
        self.admin_password = admin_password
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        # Store chat_ids of authorized users
        self.authorized_users: Set[str] = set()
        self.last_update_id = 0

    def start_polling(self):
        """Start polling for messages"""
        logger.info("Starting Telegram bot polling...")
        while True:
            try:
                self._process_updates()
                time.sleep(1)
            except Exception as e:
                logger.error(f"Polling error: {e}")
                time.sleep(5)

    def _process_updates(self):
        """Process incoming updates"""
        url = f"{self.api_url}/getUpdates"
        params = {
            'offset': self.last_update_id + 1,
            'timeout': 30
        }

        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                for update in data.get('result', []):
                    self._handle_update(update)
                    self.last_update_id = update['update_id']

    def _handle_update(self, update):
        """Handle a single update"""
        if 'message' in update:
            message = update['message']
            chat_id = str(message['chat']['id'])
            text = message.get('text', '').strip()

            if text.startswith('/start'):
                self._handle_start_command(chat_id, text)
            elif chat_id in self.authorized_users:
                self._handle_authorized_message(chat_id, text)
            else:
                self._send_message(
                    chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start <–ø–∞—Ä–æ–ª—å>")

    def _handle_start_command(self, chat_id: str, text: str):
        """Handle /start command with password"""
        parts = text.split()
        if len(parts) == 2:
            password = parts[1]
            if password == self.admin_password:
                self.authorized_users.add(chat_id)
                self._send_message(
                    chat_id,
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö."
                )
                logger.info(f"User {chat_id} authorized successfully")
            else:
                self._send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        else:
            self._send_message(
                chat_id,
                "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/start <–ø–∞—Ä–æ–ª—å>"
            )

    def _handle_authorized_message(self, chat_id: str, text: str):
        """Handle messages from authorized users"""
        if text == '/status':
            self._send_message(
                chat_id, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        elif text == '/help':
            self._send_help(chat_id)
        else:
            self._send_message(
                chat_id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

    def _send_help(self, chat_id: str):
        """Send help message"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
‚Ä¢ –ó–∞—è–≤–∫–∞—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
‚Ä¢ –ó–∞—è–≤–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö
"""
        self._send_message(chat_id, help_text)

    def _send_message(self, chat_id: str, text: str, parse_mode: str = 'HTML'):
        """Send message to Telegram chat"""
        url = f"{self.api_url}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }

        try:
            response = requests.post(url, data=payload, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            return False

    def broadcast_to_authorized(self, message: str):
        """Send message to all authorized users"""
        for chat_id in self.authorized_users:
            self._send_message(chat_id, message)

    def get_authorized_users_count(self) -> int:
        """Get number of authorized users"""
        return len(self.authorized_users)


class TelegramNotifier:
    """Telegram notification service integrated with bot"""

    def __init__(self, telegram_bot: TelegramBot):
        self.bot = telegram_bot
        self.notification_types = {
            'order': 'üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó',
            'contact': 'üìû –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –§–û–†–ú–ê',
            'volunteer': 'üë• –ó–ê–Ø–í–ö–ê –í–û–õ–û–ù–¢–ï–†–ê',
            'organizer': 'üè¢ –ó–ê–Ø–í–ö–ê –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–ê'
        }

    def send_order_notification(self, order_data: Dict):
        """Send order notification to all authorized users"""
        try:
            message = self._format_order_message(order_data)
            return self.bot.broadcast_to_authorized(message)
        except Exception as e:
            logger.error(f"Failed to send order notification: {e}")
            return False

    def send_contact_notification(self, contact_data: Dict):
        """Send contact form notification to all authorized users"""
        try:
            message = self._format_contact_message(contact_data)
            return self.bot.broadcast_to_authorized(message)
        except Exception as e:
            logger.error(f"Failed to send contact notification: {e}")
            return False

    def send_volunteer_notification(self, volunteer_data: Dict):
        """Send volunteer application notification to all authorized users"""
        try:
            message = self._format_volunteer_message(volunteer_data)
            return self.bot.broadcast_to_authorized(message)
        except Exception as e:
            logger.error(f"Failed to send volunteer notification: {e}")
            return False

    def send_organizer_notification(self, organizer_data: Dict):
        """Send organizer application notification to all authorized users"""
        try:
            message = self._format_organizer_message(organizer_data)
            return self.bot.broadcast_to_authorized(message)
        except Exception as e:
            logger.error(f"Failed to send organizer notification: {e}")
            return False

    def _format_order_message(self, data: Dict) -> str:
        """Format order data into Telegram message"""
        message = f"""
<b>{self.notification_types['order']}</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ ID: <code>{data.get('orderId', 'N/A')}</code>
‚Ä¢ –î–∞—Ç–∞: <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>
‚Ä¢ –ò–º—è: <code>{data.get('customerName', 'N/A')}</code>
‚Ä¢ Email: <code>{data.get('customerEmail', 'N/A')}</code>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('customerPhone', 'N/A') or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>

üéØ <b>–î–µ—Ç–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:</b>
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{data.get('recipientName', 'N/A')}</code>
‚Ä¢ –î–µ—Ä–µ–≤—å–µ–≤: <code>{data.get('treeCount', 'N/A')}</code>
‚Ä¢ –î–∏–∑–∞–π–Ω: <code>{data.get('selectedDesign', 'N/A')}</code>

üí∞ <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—É–º–º–∞: <code>{data.get('totalAmount', 'N/A')} {data.get('currency', 'KZT')}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <code>{data.get('status', 'pending').upper()}</code>

üå± <b>–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–∫–ª–∞–¥:</b>
‚Ä¢ –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ CO‚ÇÇ: ~<code>{int(data.get('treeCount', 0)) * 22} –∫–≥/–≥–æ–¥</code>
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ O‚ÇÇ: ~<code>{int(data.get('treeCount', 0)) * 16} –∫–≥/–≥–æ–¥</code>
"""
        return message.strip()

    def _format_contact_message(self, data: Dict) -> str:
        """Format contact form data into Telegram message"""
        message = f"""
<b>{self.notification_types['contact']}</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ò–º—è: <code>{data.get('name', 'N/A')}</code>
‚Ä¢ Email: <code>{data.get('email', 'N/A')}</code>
‚Ä¢ –¢–µ–º–∞: <code>{data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}</code>
‚Ä¢ –í—Ä–µ–º—è: <code>{data.get('submitted_at', datetime.now().strftime('%d.%m.%Y %H:%M'))}</code>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{data.get('message', 'N/A')[:300]}{'...' if len(data.get('message', '')) > 300 else ''}</code>
"""
        return message.strip()

    def _format_volunteer_message(self, data: Dict) -> str:
        """Format volunteer application into Telegram message"""
        dates = data.get('dates', '').replace(',', ', ')
        message = f"""
<b>{self.notification_types['volunteer']}</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–µ:</b>
‚Ä¢ –ò–º—è: <code>{data.get('name', 'N/A')}</code>
‚Ä¢ Email: <code>{data.get('email', 'N/A')}</code>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone', '‚Äî')}</code>
‚Ä¢ –†–µ–≥–∏–æ–Ω: <code>{data.get('region', 'N/A')}</code>
‚Ä¢ –î–∞—Ç—ã: <code>{dates or '‚Äî'}</code>

üìù <b>–û–ø—ã—Ç:</b>
<code>{data.get('experience', '‚Äî')[:200]}{'...' if len(data.get('experience', '')) > 200 else ''}</code>

‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{data.get('submitted', datetime.now().strftime('%d.%m.%Y %H:%M'))}</code>
"""
        return message.strip()

    def _format_organizer_message(self, data: Dict) -> str:
        """Format organizer application into Telegram message"""
        message = f"""
<b>{self.notification_types['organizer']}</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ:</b>
‚Ä¢ –ò–º—è: <code>{data.get('name', 'N/A')}</code>
‚Ä¢ Email: <code>{data.get('email', 'N/A')}</code>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone', 'N/A')}</code>
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: <code>{data.get('organization', '‚Äî')}</code>
‚Ä¢ –†–µ–≥–∏–æ–Ω: <code>{data.get('region', 'N/A')}</code>

üìã <b>–ü–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>
<code>{data.get('plan', '‚Äî')[:300]}{'...' if len(data.get('plan', '')) > 300 else ''}</code>

‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{data.get('submitted', datetime.now().strftime('%d.%m.%Y %H:%M'))}</code>
"""
        return message.strip()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
telegram_bot = None
telegram_notifier = None


def start_telegram_bot():
    """Start Telegram bot in background thread"""
    global telegram_bot, telegram_notifier

    telegram_bot = TelegramBot(
        bot_token=settings.TELEGRAM_BOT_TOKEN,
        admin_password=settings.TELEGRAM_ADMIN_PASSWORD
    )

    telegram_notifier = TelegramNotifier(telegram_bot)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=telegram_bot.start_polling, daemon=True)
    bot_thread.start()
    logger.info("Telegram bot started successfully")


def get_telegram_notifier():
    """Get the global telegram notifier instance"""
    global telegram_notifier
    return telegram_notifier
